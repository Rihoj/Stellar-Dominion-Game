services:
  # Web server with PHP
  web:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: stellar-dominion-web
    ports:
      - "8080:80"
    volumes:
      - ./Stellar-Dominion:/var/www/html
      - ./logs:/var/log/stellar-dominion:Z
    environment:
      - MYSQL_HOST=db
      - MYSQL_DATABASE=stellar_dominion
      - MYSQL_USER=stellar_user
      - MYSQL_PASSWORD=stellar_password
      - PHP_ENV=development
    depends_on:
      - db
      - redis
    networks:
      - stellar-network

  # MySQL Database
  db:
    image: mysql:8.0
    container_name: stellar-dominion-db
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: root_password
      MYSQL_DATABASE: users
      MYSQL_USER: admin
      MYSQL_PASSWORD: password
    volumes:
      - mysql_data:/var/lib/mysql
      - ./Stellar-Dominion/config/database.sql:/docker-entrypoint-initdb.d/01-schema.sql
      - ./docker/mysql/init/02-missing-tables.sql:/docker-entrypoint-initdb.d/02-missing-tables.sql
      - ./docker/mysql/init/03-test-data.sql:/docker-entrypoint-initdb.d/03-test-data.sql
    networks:
      - stellar-network
    command: --default-authentication-plugin=mysql_native_password

  # Redis for session storage and caching
  redis:
    image: redis:7-alpine
    container_name: stellar-dominion-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - stellar-network
    command: redis-server --appendonly yes

  # phpMyAdmin for database management
  phpmyadmin:
    image: phpmyadmin:latest
    container_name: stellar-dominion-phpmyadmin
    ports:
      - "8081:80"
    environment:
      PMA_HOST: db
      PMA_USER: stellar_user
      PMA_PASSWORD: stellar_password
      PMA_ARBITRARY: 1
    depends_on:
      - db
    networks:
      - stellar-network

  # Mailhog for testing email functionality
  mailhog:
    image: mailhog/mailhog
    container_name: stellar-dominion-mailhog
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    networks:
      - stellar-network

  # Node.js for frontend build tools (optional)
  node:
    image: node:18-alpine
    container_name: stellar-dominion-node
    working_dir: /app
    volumes:
      - ./Stellar-Dominion:/app
    command: tail -f /dev/null
    networks:
      - stellar-network

volumes:
  mysql_data:
  redis_data:

networks:
  stellar-network:
    driver: bridge
